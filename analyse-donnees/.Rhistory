# Add connected line segments to the plot
lines(b[-1], acm$eig[-11,2] - acm$eig[-1,2],
type = "b", pch = 19, col = "red")
legend("topright", col = "red", lty = 1, legend = "Saut", bty = "n", pch = 19)
par(mfrow = c(1, 2))
plot(acm, invisible = c("var", "quali.sup", "quanti.sup"))
plot(acm, invisible = c("ind", "quali.sup", "quanti.sup"))
plot(acm, invisible = c("quali.sup", "quanti.sup"))
plotellipses(acm)
?plotellipses
plotellipses(acm)
plotEllipses(acm)
plotellipses(acm)
plotellipses(acm, keepvar = c(3:5))
plotellipses(acm, keepvar = c(1:5))
plotellipses(acm, keepvar = "quali")
plot(acm, invisible = c("ind", "va"))
acm
acm$var
plot(acm, invisible = c("quali.sup", "quanti.sup"), autoLab = T)
plot(acm, invisible = c("quali.sup", "quanti.sup"), autoLab = "yes")
plot(acm, invisible = c("quali.sup", "quanti.sup"), autoLab = "no")
plot(acm, invisible = c("quali.sup", "quanti.sup"), autoLab = "yes")
plot(acm, invisible = c("quali.sup", "quanti.sup"), autoLab = "yes")
plot(acm, invisible = c("ind", "va"), autoLab = "yes")
?plot.MCA
par(mfrow = c(5, 4))
for (i in 1:4) {
for (j in 2:5)
plot(acm,
axes = c(i, j),
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
par(mfrow = c(5, 4), mar = c(0, 0, 0, 0) + .1)
for (i in 1:4) {
for (j in 2:5)
plot(acm,
axes = c(i, j),
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
par(mfrow = c(5, 4), mar = c(2, 2, 0, 0) + .1)
for (i in 1:4) {
for (j in 2:5)
plot(acm,
axes = c(i, j),
title = "",
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
par(mfrow = c(5, 4), mar = c(2, 2, 0, 0) + .1)
for (i in 1:4) {
for (j in 2:5)
plot(acm,
axes = c(i, j),
axis = FALSE,
title = "",
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
par(mfrow = c(5, 4), mar = c(2, 2, 0, 0) + .1, axes = FALSE)
for (i in 1:4) {
for (j in 2:5)
plot(acm,
axes = c(i, j),
title = "",
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
par(mfrow = c(5, 4), mar = c(2, 2, 0, 0) + .1)
for (i in 1:4) {
for (j in 2:5) {
plot(acm,
axes = c(i, j),
title = "",
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
legend("bottomleft", legend = paste(i, j))
}
}
par(mfrow = c(5, 4), mar = c(2, 2, 0, 0) + .1)
for (i in 1:4) {
for (j in 2:5) {
plot(acm,
axes = c(i, j),
title = "",
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
legend("bottomleft", legend = paste(i, j), bty = "n")
}
}
par(mfrow = c(5, 4), mar = c(2, 2, 0, 0) + .1)
for (i in 1:4) {
for (j in 2:5) {
plot(acm,
axes = c(i, j),
title = "",
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
legend("topright", legend = paste(i, j), bty = "n")
}
}
par(mfrow = c(5, 4), mar = c(2, 2, 0, 0) + .1)
for (i in 1:4) {
for (j in 2:5) {
plot(acm,
axes = c(i, j),
title = paste(i, "-", j),
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
}
par(mfrow = c(5, 4), mar = c(2, 2, 2, 0) + .1)
for (i in 1:4) {
for (j in 2:5) {
plot(acm,
axes = c(i, j),
title = paste(i, "-", j),
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
}
par(mfrow = c(5, 4), mar = c(2, 2, 1, 0) + .1)
for (i in 1:4) {
for (j in 2:5) {
plot(acm,
axes = c(i, j),
title = paste(i, "-", j),
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
}
pairs(acm$var$coord[,1:5])
acm$var$contrib
formattable(
acm$var$contrib,
list(
area() ~ normalize_bar("red", 0.2)
)
)
formattable(
data.frame(acm$var$contrib),
list(
area() ~ normalize_bar("red", 0.2)
)
)
formattable(
data.frame(acm$var$contrib),
list(
area() ~ normalize_bar("red", 0.2)
)
)
formattable(
data.frame(acm$var$contrib),
list(
area() ~ normalize_bar("red", 0.2),
area() ~ formatter("span", x ~ round(x))
)
)
formattable(
data.frame(acm$var$contrib),
list(
area() ~ normalize_bar("red", 0.2),
area() ~ formatter("span", x ~ round(x))
)
)
formattable(
data.frame(acm$var$contrib),
list(
area() ~ formatter("span", x ~ round(x)),
area() ~ normalize_bar("red", 0.2)
)
)
formattable(
data.frame(acm$var$contrib),
list(
area() ~ formatter("span", x ~ round(x)),
area() ~ normalize_bar("red", 0.2)
)
)
formattable(
data.frame(round(acm$var$contrib)),
list(
area() ~ normalize_bar("red", 0.2)
)
)
colors()
formattable(
data.frame(round(acm$var$contrib)),
list(
area() ~ normalize_bar("lightslategrey", 0.2)
)
)
?normalize_bar
normalize(mtcars$mpg)
normalize(mtcars$mpg, .2)
formattable(mtcars, list(mpg = color_bar("lightgray", proportion)))
formattable(mtcars, list(mpg = proportion_bar()))
formattable(mtcars, list(mpg = normalize_bar()))
formattable(
data.frame(round(acm$var$contrib)),
list(
area() ~ proportion_bar("lightgray")
)
)
formattable(
data.frame(round(acm$ind$contrib)),
list(
area() ~ proportion_bar("lightgray")
)
)
acm2 <- MCA(
poison,
quanti.sup = 1:2, # Variables quantitatives supplémentaires
quali.sup = 3:4,  # Variables qualitatives supplémentaires
graph = FALSE,
level.ventil = .2)
par(mar = c(2, 2, 1, 1) + .5)
b = barplot(acm2$eig[, 2],
names.arg = 1:nrow(acm2$eig),
col ="darkslategray")
# Add connected line segments to the plot
lines(b[-1], acm2$eig[-11,2] - acm2$eig[-1,2],
type = "b", pch = 19, col = "red")
legend("topright", col = "red", lty = 1, legend = "Saut", bty = "n", pch = 19)
acm$eig
acm2$eig
acm2 <- MCA(
poison,
quanti.sup = 1:2, # Variables quantitatives supplémentaires
quali.sup = 3:4,  # Variables qualitatives supplémentaires
graph = FALSE,
level.ventil = 2)
par(mar = c(2, 2, 1, 1) + .5)
b = barplot(acm2$eig[, 2],
names.arg = 1:nrow(acm2$eig),
col ="darkslategray")
lines(b[-1], acm2$eig[-11,2] - acm2$eig[-1,2],
type = "b", pch = 19, col = "red")
legend("topright", col = "red", lty = 1, legend = "Saut", bty = "n", pch = 19)
acm$eig
acm2$eig
acm2$eig[1]
acm$eig[1,]
acm$eig[,1]
acm2$eig[,1]
?MCA
acm2 <- MCA(
poison,
quanti.sup = 1:2, # Variables quantitatives supplémentaires
quali.sup = 3:4,  # Variables qualitatives supplémentaires
graph = FALSE,
level.ventil = 10)
acm$eig[,1]
acm2$eig[,1]
par(mfrow = c(5, 4), mar = c(2, 2, 1, 0) + .1)
for (i in 1:4) {
for (j in 2:5) {
plot(acm2,
axes = c(i, j),
title = paste(i, "-", j),
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
}
plotellipses(acm2, keepvar = "quali")
acm2 <- MCA(
poison,
quanti.sup = 1:2, # Variables quantitatives supplémentaires
quali.sup = 3:4,  # Variables qualitatives supplémentaires
graph = FALSE,
level.ventil = .5)
plotellipses(acm2, keepvar = "quali")
acm2$var
acm2$call
acm2$call$excl
acm2$svd
acm2$var
acm2
acm2$var
names(p)
acm2 <- MCA(
poison,
quanti.sup = 1:2, # Variables quantitatives supplémentaires
quali.sup = c(3:4, 11),  # Variables qualitatives supplémentaires
graph = FALSE)
par(mar = c(2, 2, 1, 1) + .5)
b = barplot(acm2$eig[, 2],
names.arg = 1:nrow(acm2$eig),
col ="darkslategray")
lines(b[-1], acm2$eig[-11,2] - acm2$eig[-1,2],
type = "b", pch = 19, col = "red")
par(mar = c(2, 2, 1, 1) + .5)
b = barplot(acm2$eig[, 2],
names.arg = 1:nrow(acm2$eig),
col ="darkslategray")
lines(b[-1], acm2$eig[-10,2] - acm2$eig[-1,2],
type = "b", pch = 19, col = "red")
legend("topright", col = "red", lty = 1, legend = "Saut", bty = "n", pch = 19)
par(mfrow = c(5, 4), mar = c(2, 2, 1, 0) + .1)
for (i in 1:4) {
for (j in 2:5) {
plot(acm2,
axes = c(i, j),
title = paste(i, "-", j),
invisible = c("ind", "quali.sup", "quanti.sup"),
autoLab = "yes")
}
}
plotellipses(acm2, keepvar = "quali")
plot(acm2, invisible = c("ind", "va"), autoLab = "yes")
plot(acm2)
plot(acm)
plot(acm, choix = "var")
plot(acm, choix = "var", invisible = c("quali.sup", "quanti.sup"))
plot(acm, choix = "var", invisible = c("quali.sup", "quanti.sup"))
knitr::opts_chunk$set(comment = NA)
b = barplot(acm$eig[,2], ylim = c(0, 110),
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslateblue")
lines(b[-1], acm$eig[-nrow(acp$eig),2] - acm$eig[-1,2],
type = "b", col = "red")
b = barplot(acm$eig[,2], ylim = c(0, 110),
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslateblue")
lines(b[-1], acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red")
b = barplot(acm$eig[,2],
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslateblue")
lines(b[-1], acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red")
b = barplot(acm$eig[,2],
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslategray")
lines(b[-1], acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red")
b = barplot(acm$eig[,2],
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslategray")
lines(b[-1], acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red", lwd = 2)
plot(acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2])
plot(acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],type = "b")
plot(acm$eig[,3])
plot(acm)
plot(acm, choix = "ind")
plot(acm, choix = "var")
plot(acm, choix = "ind")
plot(acm, invisible = "ind")
plot(acm, invisible = "var")
names(poison)
acm = MCA(poison[,5:15], graph = FALSE)
acm$eig
barplot(acm$eig[,2])
plot(acm$eig[,3])
plot(acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],type = "b")
b = barplot(acm$eig[,2],
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslategray")
lines(b[-1], acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red", lwd = 2)
b = barplot(acm$eig[,2],
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslategray")
lines(b, acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red", lwd = 2)
b = barplot(acm$eig[,2],
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslategray")
lines(b[-1], acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red", lwd = 2)
b = barplot(acm$eig[,2],
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslategray")
lines(b[-nrow(acp$eig)], acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red", lwd = 2)
b = barplot(acm$eig[,2],
xlab = "Composantes", ylab = "% variance expliquée",
col = "darkslategray")
lines(b[-nrow(acm$eig)], acm$eig[-nrow(acm$eig),2] - acm$eig[-1,2],
type = "b", col = "red", lwd = 2)
plot(acm)
plot(afc, axes = c(1, 3))
plot(acm, axes = c(1, 3))
plot(acm, invisible = "var")
plot(afc, invisible = "ind")
plot(acm, invisible = "ind")
plot(acm, choix = "var")
acm
round(acm$var$v.test)
round(acm$var$v.test,1)
acm$var
acm$eig
library(FactoInvestigate)
Investigate(acm, file = "Investigate-ACM.Rmd")
library(Factoshiny)
MCAshiny(acm)
acm$var$contrib
acm$var$contrib[1]
acm$var$contrib[,1]
acm$var$contri
data.frame(acm$var$contrib)
data.frame(acm$var$contrib)
as.data.frame(acm$var$contrib)
as.data.frame(acm$var$contrib)
subset(as.data.frame(acm$var$contrib), `Dim 1` > 8)
nrow(acm$var$contrib)
100 / 22
subset(as.data.frame(acm$var$contrib), `Dim 1` > 5)
subset(as.data.frame(acm$var$contrib), `Dim 1` > 5)
subset(as.data.frame(acm$var$contrib), `Dim 1` > 8)
subset(as.data.frame(acm$var$contrib), `Dim 1` > 8)
subset(as.data.frame(acm$var$contrib), `Dim 1` > 8)[,1]
subset(as.data.frame(acm$var$contrib), `Dim 1` > 8)[,1]
subset(as.data.frame(acm$var$contrib), `Dim 1` > 8)
acm$var$coord
subset(as.data.frame(acm$var$contrib), `Dim 1` > 5)
plot(acm, invisible = "ind")
acm$var$contrib %>%
tibble()
acm$var$contrib %>%
data.frame() %>%
tibble()
acm$var$contrib %>%
data.frame()
acm$var$contrib %>%
data.frame() %>%
rownames_to_column(var= "modality")
acm$var$contrib %>%
data.frame() %>%
rownames_to_column(var= "modality") %>%
filter(`Dim 1`)
acm$var$contrib %>%
data.frame() %>%
transmute(contribution = Dim.1) %>%
rownames_to_column(var= "modality")
acm$var$contrib %>%
data.frame() %>%
transmute(contribution = Dim.1) %>%
rownames_to_column(var= "modality")
acm$var$contrib %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(mmodalite = mod, contribution = Dim.1)
acm$var$coord %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, coordonnee = Dim.1)
acm$var$coord %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, coordonnee = Dim.1)
acm$var$v.test %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, v.test = Dim.1)
ct1 = acm$var$contrib %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, contribution = Dim.1)
co1 = acm$var$coord %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, coordonnee = Dim.1)
vt1 = acm$var$v.test %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, v.test = Dim.1)
ax1 = ct1 %>% inner_join(co1) %>% inner_join(vt1)
ax1
ax1 %>%
arrange(desc(contribution))
ax1 %>%
arrange(desc(contribution))
ct1 = acm$var$contrib %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, contribution = round(Dim.1, 1))
co1 = acm$var$coord %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, coordonnee = round(Dim.1, 1))
vt1 = acm$var$v.test %>%
data.frame() %>%
rownames_to_column(var = "mod") %>%
transmute(modalite = mod, v.test = round(Dim.1, 1))
ax1 = ct1 %>% inner_join(co1) %>% inner_join(vt1)
ax1 %>%
arrange(desc(contribution))
ax1 %>%
arrange(desc(contribution))
acm
?MCA
airbnb = read_csv("airbnb-paris-2015-09-02.csv")
library(readr)
airbnb = read_csv("airbnb-paris-2015-09-02.csv")
probleme()
problems()
setwd("~/GitHub/cours-2017-2018/analyse-donnees")
readLines("airbnb-paris-2015-09-02.csv", n = 10)
readLines("airbnb-paris-2015-09-02.csv", n = 1)
airbnb = read.table("airbnb-paris-2015-09-02.csv", header = T, sep = ",", quote = '"')
?read_csv
airbnb = read_delim("airbnb-paris-2015-09-02.csv", delim = ",")
DT:datatable(airbnb)
airbnb = read.table("airbnb-paris-2015-09-02.csv",
header = T, sep = ",", quote = '"')
DT::datatable(airbnb)
DT::datatable(head(airbnb))
DT::datatable(head(airbnb))
